#pragma kernel CSMain

StructuredBuffer<float3> originalVertices;
RWStructuredBuffer<float3> deformedVertices;
StructuredBuffer<float2> uvs;

Texture2D<float> heightMap;


SamplerState samplerLinearClamp
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};


float heightScale;
float sphereRadius;
float globalScale;
uint vertexCount;

[numthreads(64, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= vertexCount)
        return;

    float3 originalPos = originalVertices[id.x];
    float2 uv = uvs[id.x];


    float2 uvSample = float2(1.0 - uv.x, 1.0 - uv.y);


    float elevation = heightMap.SampleLevel(samplerLinearClamp, uvSample, 0);


    float3 pointOnUnitSphere = normalize(originalPos);
    float actualElevation = (elevation - 0.5f) * heightScale;
    float3 newPosition = pointOnUnitSphere * (sphereRadius + actualElevation) * globalScale;

    deformedVertices[id.x] = newPosition;
}
